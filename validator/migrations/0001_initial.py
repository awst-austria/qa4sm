# Generated by Django 2.2.6 on 2020-01-09 14:52

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('organisation', models.CharField(blank=True, max_length=50)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=80)),
                ('help_text', models.CharField(max_length=150)),
                ('parameterised', models.BooleanField(default=False)),
                ('dialog_name', models.CharField(blank=True, max_length=30, null=True)),
                ('default_parameter', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=30)),
                ('pretty_name', models.CharField(max_length=30)),
                ('help_text', models.CharField(max_length=150)),
                ('source_reference', models.TextField()),
                ('citation', models.TextField()),
                ('is_reference', models.BooleanField(default=False)),
                ('filters', models.ManyToManyField(related_name='filters', to='validator.DataFilter')),
            ],
        ),
        migrations.CreateModel(
            name='DatasetConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dataset_configurations', to='validator.Dataset')),
                ('filters', models.ManyToManyField(related_name='dataset_configurations', to='validator.DataFilter')),
            ],
        ),
        migrations.CreateModel(
            name='DatasetVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=30)),
                ('pretty_name', models.CharField(max_length=30)),
                ('help_text', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='DataVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=30)),
                ('pretty_name', models.CharField(max_length=30)),
                ('help_text', models.CharField(max_length=150)),
                ('min_value', models.FloatField(null=True)),
                ('max_value', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_mode', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Settings',
            },
        ),
        migrations.CreateModel(
            name='ValidationRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name_tag', models.CharField(blank=True, max_length=80)),
                ('start_time', models.DateTimeField(verbose_name='started')),
                ('end_time', models.DateTimeField(null=True, verbose_name='finished')),
                ('total_points', models.IntegerField(default=0)),
                ('error_points', models.IntegerField(default=0)),
                ('ok_points', models.IntegerField(default=0)),
                ('progress', models.IntegerField(default=0)),
                ('scaling_method', models.CharField(choices=[('min_max', 'Min/Max'), ('linreg', 'Linear regression'), ('mean_std', 'Mean/standard deviation')], default='mean_std', max_length=20)),
                ('interval_from', models.DateTimeField(null=True)),
                ('interval_to', models.DateTimeField(null=True)),
                ('anomalies', models.CharField(choices=[('none', 'Do not calculate'), ('moving_avg_35_d', '35 day moving average'), ('climatology', 'Climatology')], default='none', max_length=20)),
                ('min_lat', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('min_lon', models.FloatField(blank=True, null=True)),
                ('max_lat', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('max_lon', models.FloatField(blank=True, null=True)),
                ('anomalies_from', models.DateTimeField(blank=True, null=True)),
                ('anomalies_to', models.DateTimeField(blank=True, null=True)),
                ('output_file', models.FileField(max_length=250, null=True, upload_to='')),
                ('reference_configuration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ref_validation_run', to='validator.DatasetConfiguration')),
                ('scaling_ref', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scaling_ref_validation_run', to='validator.DatasetConfiguration')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ParametrisedFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameters', models.TextField()),
                ('dataset_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='validator.DatasetConfiguration')),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='validator.DataFilter')),
            ],
        ),
        migrations.AddField(
            model_name='datasetconfiguration',
            name='parametrised_filters',
            field=models.ManyToManyField(through='validator.ParametrisedFilter', to='validator.DataFilter'),
        ),
        migrations.AddField(
            model_name='datasetconfiguration',
            name='validation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset_configurations', to='validator.ValidationRun'),
        ),
        migrations.AddField(
            model_name='datasetconfiguration',
            name='variable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dataset_configurations', to='validator.DataVariable'),
        ),
        migrations.AddField(
            model_name='datasetconfiguration',
            name='version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dataset_configurations', to='validator.DatasetVersion'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='variables',
            field=models.ManyToManyField(related_name='variables', to='validator.DataVariable'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='versions',
            field=models.ManyToManyField(related_name='versions', to='validator.DatasetVersion'),
        ),
        migrations.CreateModel(
            name='CeleryTask',
            fields=[
                ('celery_task_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('validation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='celery_tasks', to='validator.ValidationRun')),
            ],
        ),
        migrations.AlterOrderWithRespectTo(
            name='datasetconfiguration',
            order_with_respect_to='validation',
        ),
    ]
